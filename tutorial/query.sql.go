// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package tutorial

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events
    (aggregate_id, kind, version, created_at, data)
VALUES
    ($1, $2, $3, current_timestamp, $4)
RETURNING id, aggregate_id, kind, version, created_at, data
`

type CreateEventParams struct {
	AggregateID int32
	Kind        string
	Version     string
	Data        []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.AggregateID,
		arg.Kind,
		arg.Version,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.Kind,
		&i.Version,
		&i.CreatedAt,
		&i.Data,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users
    (name, password)
VALUES
    ($1, $2)
RETURNING id, name, password, created_at, updated_at
`

type CreateUserParams struct {
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, password, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsFrom = `-- name: GetEventsFrom :many
SELECT id, aggregate_id, kind, version, created_at, data FROM events
WHERE created_at >= $1 LIMIT $2
`

type GetEventsFromParams struct {
	CreatedAt pgtype.Timestamptz
	Limit     int32
}

func (q *Queries) GetEventsFrom(ctx context.Context, arg GetEventsFromParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsFrom, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.AggregateID,
			&i.Kind,
			&i.Version,
			&i.CreatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, password, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
    set name = $2,
    password = $3,
    updated_at = current_timestamp
WHERE
    id = $1
RETURNING id, name, password, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int64
	Name     string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
